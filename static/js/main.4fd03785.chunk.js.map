{"version":3,"sources":["components/Header/Header.tsx","components/FileUpload/FileUpload.tsx","function/putCharactere.tsx","function/getOneCharactere.tsx","components/ModalEdit/EditModal.tsx","function/cardImage.ts","function/deleteOneCharactere.tsx","components/ModalView/ViewModal.tsx","function/getCharactere.tsx","components/ListsCharacter/ListsCharacter.tsx","function/postCharactere.tsx","components/ModalAdd/AddModal.tsx","components/FloatButton/FloatButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","AppBar","position","Toolbar","Typography","variant","color","noWrap","FileUpload","props","filesLimit","dropzoneText","showPreviews","acceptedFiles","showPreviewsInDropzone","onChange","img","reader","FileReader","readAsDataURL","onload","evt","image","target","result","onchange","split","putCharactere","id","data","a","axios","put","res","getOneCharactere","get","EditModal","useState","name","inputName","setInputName","shortDescription","inputShortDescription","setInputShortDescription","description","inputDescription","setInputDescription","inputImage","setInputImage","handleChange","e","getAttribute","value","submit","updateData","close","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","label","fullWidth","type","multiline","DialogActions","Button","onClick","cardImage","deleteOneCharactere","delete","ViewModal","charactere","editModal","setEditModal","handleBtnDelete","handleBtnEdit","handleEditClose","Fragment","className","CardMedia","src","title","source","update","getCharactere","ListsCharacter","characteres","setCharacteres","setCharactere","viewModal","setViewModal","useEffect","fetchData","handleViewOpen","Container","maxWidth","Grid","container","spacing","map","item","key","xs","sm","md","Card","CardContent","gutterBottom","component","CardActions","size","postCharactere","post","AppModal","useStyles","makeStyles","theme","fab","bottom","right","FloatingActionButtonZoom","classes","useTheme","transitionDuration","enter","transitions","duration","enteringScreen","exit","leavingScreen","Zoom","in","timeout","style","transitionDelay","unmountOnExit","Fab","aria-label","App","openAddModal","setopenAddModal","AddModal","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fd03785.chunk.js","sourcesContent":["import React from \"react\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport AccessibilityNewIcon from \"@material-ui/icons/AccessibilityNew\";\n\nconst Header: React.FC = () => (\n  <AppBar position=\"relative\">\n    <Toolbar>\n      <AccessibilityNewIcon />\n      <Typography variant=\"h6\" color=\"inherit\" noWrap>\n        Character Manager\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n\n\nexport default Header;\n","import React from \"react\";\nimport { DropzoneArea } from \"material-ui-dropzone\";\n\nconst FileUpload = (props: { onchange: any }) => {\n  const convertisseur = (img: File[]) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(img![0]);\n    reader.onload = evt => {\n      // SEND TO AddModal\n      let image = evt.target!;\n      if (image && typeof image.result === \"string\") {\n        props.onchange(image.result.split(\",\")[1]);\n      }\n    };\n  };\n\n  return (\n    <DropzoneArea\n      filesLimit={1}\n      dropzoneText=\"Drag and drop une image ou cliquer\"\n      showPreviews={true}\n      acceptedFiles={[\"image/jpeg\", \"image/png\", \"image/bmp\"]}\n      showPreviewsInDropzone={false}\n      onChange={convertisseur}\n    ></DropzoneArea>\n  );\n};\n\nexport default FileUpload;\n","import axios from \"axios\";\n\nimport ICharactere from \"../interfaces/ICharactere\";\n\nconst putCharactere = async (id: string, data: ICharactere) => {\n  try {\n    const res = await axios.put(\n      `https://character-database.becode.xyz/characters/${id}`,\n      data\n    );\n    return res.data;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport default putCharactere;\n","import axios from \"axios\";\n\nconst getOneCharactere = async (id: string) => {\n  try {\n    const res = await axios.get(\n      `https://character-database.becode.xyz/characters/${id}`\n    );\n\n    return res.data;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport default getOneCharactere;\n","import React, { useState } from \"react\";\n\n// MATERIAL UI\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\n// COMPONENTS\nimport FileUpload from \"../FileUpload/FileUpload\";\n\n// ADDONS\nimport ICharactere from \"../../interfaces/ICharactere\";\nimport putCharactere from \"../../function/putCharactere\";\nimport getOneCharactere from \"../../function/getOneCharactere\";\n\nconst EditModal = (props: {\n  open: boolean;\n  close: any;\n  data: ICharactere;\n  updateData: any;\n}) => {\n  const [inputName, setInputName] = useState(props.data.name);\n  const [inputShortDescription, setInputShortDescription] = useState(\n    props.data.shortDescription\n  );\n  const [inputDescription, setInputDescription] = useState(\n    props.data.description\n  );\n  const [inputImage, setInputImage] = useState(props.data.image);\n\n  const handleChange = (e: any) => {\n    switch (e.target.getAttribute(\"id\")) {\n      case \"InputName\":\n        setInputName(e.target.value);\n        break;\n      case \"InputShortDescription\":\n        setInputShortDescription(e.target.value);\n        break;\n      case \"InputDescription\":\n        setInputDescription(e.target.value);\n        break;\n    }\n  };\n\n  const submit = async () => {\n    if (typeof props.data.id !== \"undefined\") {\n      await putCharactere(props.data.id, {\n        name: inputName,\n        shortDescription: inputShortDescription,\n        description: inputDescription,\n        image: inputImage\n      });\n\n      // UPDATE DATA\n      props.updateData(await getOneCharactere(props.data.id));\n\n      // CLOSE MODAL\n      props.close();\n    }\n  };\n\n  return (\n    <Dialog\n      open={props.open}\n      onClose={props.close}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">Éditer votre héro</DialogTitle>\n      <DialogContent>\n        <FileUpload onchange={setInputImage} />\n        <TextField\n          value={inputName}\n          onChange={handleChange}\n          autoFocus\n          margin=\"dense\"\n          id=\"InputName\"\n          label=\"Name\"\n          fullWidth\n        />\n        <TextField\n          value={inputShortDescription}\n          onChange={handleChange}\n          margin=\"dense\"\n          id=\"InputShortDescription\"\n          label=\"Short description\"\n          fullWidth\n        />\n        <TextField\n          value={inputDescription}\n          onChange={handleChange}\n          margin=\"dense\"\n          id=\"InputDescription\"\n          label=\"Description\"\n          type=\"text\"\n          fullWidth\n          multiline\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.close} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={submit} color=\"primary\">\n          Update\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default EditModal;\n","// Manage balise img concernant une carte\nconst cardImage = (image: string) => {\n  if (typeof image !== \"undefined\") return `data:image/png;base64,${image}`;\n  return \"https://source.unsplash.com/random\";\n};\n\nexport default cardImage;\n","import axios from \"axios\";\n\nconst deleteOneCharactere = async (id: string) => {\n  try {\n    const res = await axios.delete(\n      `https://character-database.becode.xyz/characters/${id}`\n    );\n\n    return res.data;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport default deleteOneCharactere;\n","import React, { useState } from \"react\";\n\n// MATERIAL-UI\nimport {\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  DialogActions,\n  Button,\n  CardMedia\n} from \"@material-ui/core\";\n\n// COMPONENTS\nimport ReactMarkdown from \"react-markdown\";\nimport EditModal from \"../ModalEdit/EditModal\";\n\n// ADDONS\nimport ICharactere from \"../../interfaces/ICharactere\";\nimport cardImage from \"../../function/cardImage\";\nimport deleteOneCharactere from \"../../function/deleteOneCharactere\";\n\nimport \"./ViewModal.css\";\n\nconst ViewModal = (props: {\n  open: boolean;\n  close: any;\n  data: ICharactere;\n  update: any;\n}) => {\n  const charactere = props.data;\n\n  // EDIT\n  const [editModal, setEditModal] = useState(false);\n\n  const handleBtnDelete = async () => {\n    await deleteOneCharactere(charactere.id!);\n    props.close(); // CLOSE the modal\n  };\n\n  const handleBtnEdit = () => {\n    setEditModal(true);\n  };\n\n  const handleEditClose = () => {\n    // CLOSE MODAL\n    setEditModal(false);\n  };\n\n  const dialog = () => (\n    <React.Fragment>\n      <Dialog className=\"dialogView\" open={props.open} onClose={props.close}>\n        <CardMedia\n          className=\"cardMedia\"\n          image={cardImage(charactere.image)}\n          src=\"img\"\n          title={charactere.name}\n        />\n        <DialogTitle id=\"form-dialog-title\">\n          {charactere.name || \"undefined\"}\n        </DialogTitle>\n        <DialogContent>\n          {<ReactMarkdown source={charactere.description} /> || \"undefined\"}\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={handleBtnEdit}>\n            Edit\n          </Button>\n          <Button color=\"secondary\" onClick={handleBtnDelete}>\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <EditModal\n        open={editModal}\n        close={handleEditClose}\n        data={props.data}\n        updateData={props.update}\n      />\n    </React.Fragment>\n  );\n\n  if (props.open) return dialog();\n\n  return <div></div>;\n};\n\nexport default ViewModal;\n","import axios from \"axios\";\nconst getCharactere = async () => {\n  await axios.get(\"https://character-database.becode.xyz/characters\");\n\n  try {\n    const res = await axios.get(\n      `https://character-database.becode.xyz/characters`\n    );\n\n    return res.data;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport default getCharactere;\n","import React, { useEffect, useState } from \"react\";\n\n// MATERIAL-UI\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\n// COMPONENTS\nimport ViewModal from \"../ModalView/ViewModal\";\n\n// ADDONS\nimport ICharactere from \"../../interfaces/ICharactere\";\nimport getCharactere from \"../../function/getCharactere\";\nimport getOneCharactere from \"../../function/getOneCharactere\";\nimport cardImage from \"../../function/cardImage\";\n\nimport \"./ListsCharacter.css\";\n\nconst ListsCharacter = () => {\n  const [characteres, setCharacteres] = useState([]);\n  const [charactere, setCharactere] = useState();\n\n  // VIEW\n  const [viewModal, setViewModal] = useState(false);\n\n  // Récupère les infos une fois le composent charger\n  useEffect(() => {\n    const fetchData = async () => {\n      setCharacteres(await getCharactere());\n    };\n\n    fetchData();\n  });\n\n  // View MODAL\n  const handleViewOpen = async (id: string) => {\n    // REQUEST\n    setCharactere(await getOneCharactere(id));\n    // SHOW MODAL\n    setViewModal(true);\n  };\n  const handleViewClose = () => {\n    // SHOW MODAL\n    setViewModal(false);\n  };\n\n  return (\n    <Container className=\"listsCharacter\" maxWidth=\"md\">\n      <Grid container spacing={4}>\n        {characteres.map((charactere: ICharactere) => (\n          <Grid item key={charactere.id} xs={12} sm={6} md={4}>\n            <Card>\n              <CardMedia\n                className=\"cardMedia\"\n                image={cardImage(charactere.image)}\n                src=\"img\"\n                title={charactere.name}\n              />\n              <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                  {charactere.name}\n                </Typography>\n                <Typography component=\"p\">\n                  {charactere.shortDescription}\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button\n                  onClick={() => {\n                    handleViewOpen(charactere.id!);\n                  }}\n                  size=\"small\"\n                  color=\"primary\"\n                >\n                  View\n                </Button>\n              </CardActions>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n      <ViewModal\n        open={viewModal}\n        close={handleViewClose}\n        data={charactere}\n        update={setCharactere}\n      ></ViewModal>\n    </Container>\n  );\n};\n\nexport default ListsCharacter;\n","import axios from \"axios\";\n\nimport ICharactere from \"../interfaces/ICharactere\";\n\nconst postCharactere = async (data: ICharactere) => {\n  try {\n    const res = await axios.post(\n      `https://character-database.becode.xyz/characters/`,\n      data\n    );\n    return res.data;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport default postCharactere;\n","import React, { useState } from \"react\";\n\n// MATERIAL UI\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\n// COMPONENTS\nimport FileUpload from \"../FileUpload/FileUpload\";\nimport postCharactere from \"../../function/postCharactere\";\n\nconst AppModal = (props: { open: boolean; close: any }) => {\n  const [inputName, setInputName] = useState(\"\");\n  const [inputShortDescription, setInputShortDescription] = useState(\"\");\n  const [inputDescription, setInputDescription] = useState(\"\");\n  const [inputImage, setInputImage] = useState(\"\");\n\n  const handleChange = (e: any) => {\n    switch (e.target.getAttribute(\"id\")) {\n      case \"InputName\":\n        setInputName(e.target.value);\n        break;\n      case \"InputShortDescription\":\n        setInputShortDescription(e.target.value);\n        break;\n      case \"InputDescription\":\n        setInputDescription(e.target.value);\n        break;\n    }\n  };\n\n  const submit = async () => {\n    await postCharactere({\n      name: inputName,\n      shortDescription: inputShortDescription,\n      description: inputDescription,\n      image: inputImage\n    });\n\n    // RESET ALL INPUT\n    setInputName(\"\");\n    setInputShortDescription(\"\");\n    setInputDescription(\"\");\n    setInputImage(\"\");\n\n    // CLOSE MODAL\n    props.close();\n  };\n\n  return (\n    <Dialog\n      open={props.open}\n      onClose={props.close}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">Ajouter votre héro</DialogTitle>\n      <DialogContent>\n        <FileUpload onchange={setInputImage} />\n        <TextField\n          value={inputName}\n          onChange={handleChange}\n          autoFocus\n          margin=\"dense\"\n          id=\"InputName\"\n          label=\"Name\"\n          fullWidth\n        />\n        <TextField\n          value={inputShortDescription}\n          onChange={handleChange}\n          margin=\"dense\"\n          id=\"InputShortDescription\"\n          label=\"Short description\"\n          fullWidth\n        />\n        <TextField\n          value={inputDescription}\n          onChange={handleChange}\n          margin=\"dense\"\n          id=\"InputDescription\"\n          label=\"Description\"\n          type=\"text\"\n          fullWidth\n          multiline\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.close} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={submit} color=\"primary\">\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AppModal;\n","import React from \"react\";\n\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Zoom from \"@material-ui/core/Zoom\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nconst useStyles = makeStyles(theme => ({\n  fab: {\n    position: \"fixed\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(2)\n  }\n}));\n\nexport default function FloatingActionButtonZoom(props: { onClick: any }) {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const transitionDuration = {\n    enter: theme.transitions.duration.enteringScreen,\n    exit: theme.transitions.duration.leavingScreen\n  };\n  return (\n    <div>\n      <Zoom\n        key=\"primary\"\n        in={true}\n        timeout={transitionDuration}\n        style={{\n          transitionDelay: `${transitionDuration.exit}ms`\n        }}\n        unmountOnExit\n      >\n        <Fab\n          onClick={props.onClick}\n          aria-label=\"Add\"\n          className={classes.fab}\n          color=\"primary\"\n        >\n          <AddIcon />\n        </Fab>\n      </Zoom>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport Header from \"./components/Header/Header\";\nimport ListCharacter from \"./components/ListsCharacter/ListsCharacter\";\n\nimport AddModal from \"./components/ModalAdd/AddModal\";\nimport FloatButton from \"./components/FloatButton/FloatButton\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [openAddModal, setopenAddModal] = useState(false);\n\n  const handleClickOpen = () => {\n    setopenAddModal(true);\n  };\n\n  const handleClose = () => {\n    setopenAddModal(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <ListCharacter />\n      <AddModal open={openAddModal} close={handleClose} />\n      <FloatButton onClick={handleClickOpen} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}